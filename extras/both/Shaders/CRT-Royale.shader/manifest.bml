input
  filter: nearest
  
// IMPORTANT:
// Shader passes need to know details about the image in the mask_texture LUT
// files, so set the following constants in user-preset-constants.h accordingly:
// 1.) mask_triads_per_tile = (number of horizontal triads in mask texture LUT's)
// 2.) mask_texture_small_size = (texture size of mask*texture_small LUT's)
// 3.) mask_texture_large_size = (texture size of mask*texture_large LUT's)
// 4.) mask_grille_avg_color = (avg. brightness of mask_grille_texture* LUT's, in [0, 1])
// 5.) mask_slot_avg_color = (avg. brightness of mask_slot_texture* LUT's, in [0, 1])
// 6.) mask_shadow_avg_color = (avg. brightness of mask_shadow_texture* LUT's, in [0, 1])
// Shader passes also need to know certain scales set in this preset, but their
// compilation model doesn't currently allow the preset file to tell them.  Make
// sure to set the following constants in user-preset-constants.h accordingly too:
// 1.) bloom_approx_scale_x = scale_x2
// 2.) mask_resize_viewport_scale = vec2(scale_x6, scale_y5)
// Finally, shader passes need to know the value of geom_max_aspect_ratio used to
// calculate scale_y5 (among other values):
// 1.) geom_max_aspect_ratio = (geom_max_aspect_ratio used to calculate scale_y5)

// Pass0: Linearize the input based on CRT gamma and bob interlaced fields.
// (Bobbing ensures we can immediately blur without getting artifacts.)
program
  filter: nearest
  vertex: first-pass-linearize-crt-gamma-bob-fields.vs
  fragment: first-pass-linearize-crt-gamma-bob-fields.fs
  format: rgba16f
  height: 100%
  width: 100%

// Pass1: Resample interlaced (and misconverged) scanlines vertically.
// Separating vertical/horizontal scanline sampling is faster: It lets us
// consider more scanlines while calculating weights for fewer pixels, and
// it reduces our samples from vertical*horizontal to vertical+horizontal.
// This has to come right after ORIG_LINEARIZED, because there's no
// "original_source" scale_type we can use later.  
program
  filter: linear
  vertex: scanlines-vertical-interlacing.vs
  fragment: scanlines-vertical-interlacing.fs
  height: 400%
  width: 100%
  format: rgba16f
  
// Pass2: Do a small resize blur of ORIG_LINEARIZED at an absolute size, and
// account for convergence offsets.  We want to blur a predictable portion of the
// screen to match the phosphor bloom, and absolute scale works best for
// reliable results with a fixed-size bloom.  Picking a scale is tricky:
// a.) 400x300 is a good compromise for the "fake-bloom" version: It's low enough
//     to blur high-res/interlaced sources but high enough that resampling
//     doesn't smear low-res sources too much.
// b.) 320x240 works well for the "real bloom" version: It's 1-1.5% faster, and
//     the only noticeable visual difference is a larger halation spread (which
//     may be a good thing for people who like to crank it up).
// Note the 4:3 aspect ratio assumes the input has cropped geom_overscan (so it's
// *intended* for an ~4:3 aspect ratio).  
program
  filter: linear
  vertex: bloom-approx.vs
  fragment: bloom-approx.fs
  format: rgba16f
  width: 320 px
  height: 240 px

// Pass3: Vertically blur the input for halation and refractive diffusion.
// Base this on BLOOM_APPROX: This blur should be small and fast, and blurring
// a constant portion of the screen is probably physically correct if the
// viewport resolution is proportional to the simulated CRT size.  
program
  filter: linear
  vertex: blur9fast-vertical.vs
  fragment: blur9fast-vertical.fs
  format: rgba16f
  height: 100%
  width: 100%

// Pass4: Horizontally blur the input for halation and refractive diffusion.
// Note: Using a one-pass 9x9 blur is about 1% slower.  
program
  filter: linear
  vertex: blur9fast-horizontal.vs
  fragment: blur9fast-horizontal.fs
  format: rgba16f
  height: 100%
  width: 100%

// Pass5: Lanczos-resize the phosphor mask vertically.  Set the absolute
// scale_x5 == mask_texture_small_size.x (see IMPORTANT above).  Larger scales
// will blur, and smaller scales could get nasty.  The vertical size must be
// based on the viewport size and calculated carefully to avoid artifacts later.
// First calculate the minimum number of mask tiles we need to draw.
// Since curvature is computed after the scanline masking pass:
//   num_resized_mask_tiles = 2.0;
// If curvature were computed in the scanline masking pass (it's not):
//   max_mask_texel_border = ~3.0 * (1/3.0 + 4.0*sqrt(2.0) + 0.5 + 1.0);
//   max_mask_tile_border = max_mask_texel_border/
//       (min_resized_phosphor_triad_size * mask_triads_per_tile);
//   num_resized_mask_tiles = max(2.0, 1.0 + max_mask_tile_border * 2.0);
//   At typical values (triad_size >= 2.0, mask_triads_per_tile == 8):
//       num_resized_mask_tiles = ~3.8
// Triad sizes are given in horizontal terms, so we need geom_max_aspect_ratio
// to relate them to vertical resolution.  The widest we expect is:
//   geom_max_aspect_ratio = 4.0/3.0  // Note: Shader passes need to know this!
// The fewer triads we tile across the screen, the larger each triad will be as a
// fraction of the viewport size, and the larger scale_y5 must be to draw a full
// num_resized_mask_tiles.  Therefore, we must decide the smallest number of
// triads we'll guarantee can be displayed on screen.  We'll set this according
// to 3-pixel triads at 768p resolution (the lowest anyone's likely to use):
//   min_allowed_viewport_triads = 768.0*geom_max_aspect_ratio / 3.0 = 341.333333
// Now calculate the viewport scale that ensures we can draw resized_mask_tiles:
//   min_scale_x = resized_mask_tiles * mask_triads_per_tile /
//       min_allowed_viewport_triads
//   scale_y5 = geom_max_aspect_ratio * min_scale_x
//   # Some code might depend on equal scales:
//   scale_x6 = scale_y5
// Given our default geom_max_aspect_ratio and min_allowed_viewport_triads:
//   scale_y5 = 4.0/3.0 * 2.0/(341.33333 / 8.0) = 0.0625
// IMPORTANT: The scales MUST be calculated in this way.  If you wish to change
// geom_max_aspect_ratio, update that constant in user-preset-constants.h!
program
  filter: linear
  format: rgba16f
  width: 64 px
  height: 6.25%
  vertex: mask-resize-vertical.vs
  fragment: mask-resize-vertical.fs
  pixmap: textures/TileableLinearApertureGrille15Wide8And5d5SpacingResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearApertureGrille15Wide8And5d5Spacing.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearSlotMaskTall15Wide9And4d5Horizontal9d14VerticalSpacingResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearSlotMaskTall15Wide9And4d5Horizontal9d14VerticalSpacing.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearShadowMaskEDPResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearShadowMaskEDP.png
    filter: linear
    wrap: repeat

// Pass6: Lanczos-resize the phosphor mask horizontally.  scale_x6 = scale_y5.
// TODO: Check again if the shaders actually require equal scales.
program
  filter: nearest
  vertex: mask-resize-horizontal.vs
  fragment: mask-resize-horizontal.fs
  format: rgba16f

// Pass7: Resample (misconverged) scanlines horizontally, apply halation, and
// apply the phosphor mask.
program
  filter: linear
  format: rgba16f
  height: 100%
  width: 100%
  vertex: scanlines-horizontal-apply-mask.vs
  fragment: scanlines-horizontal-apply-mask.fs  
  pixmap: textures/TileableLinearApertureGrille15Wide8And5d5SpacingResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearApertureGrille15Wide8And5d5Spacing.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearSlotMaskTall15Wide9And4d5Horizontal9d14VerticalSpacingResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearSlotMaskTall15Wide9And4d5Horizontal9d14VerticalSpacing.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearShadowMaskEDPResizeTo64.png
    filter: linear
    wrap: repeat
  pixmap: textures/TileableLinearShadowMaskEDP.png
    filter: linear
    wrap: repeat

// Pass 8: Compute a brightpass.  This will require reading the final mask.    
program
  filter: linear
  format: rgba16f
  vertex: brightpass.vs
  fragment: brightpass.fs

// Pass 9: Blur the brightpass vertically
program
  filter: linear
  format: rgba16f
  vertex: bloom-vertical.vs
  fragment: bloom-vertical.fs
  
// Pass 10: Blur the brightpass horizontally and combine it with the dimpass:
program
  filter: linear
  format: rgba16f
  height: 100%
  width: 100%
  vertex: bloom-horizontal-reconstitute.vs
  fragment: bloom-horizontal-reconstitute.fs
  
// Pass 11: Compute curvature/AA:
program
  filter: linear
  format: rgba16f
  vertex: geometry-aa-last-pass.vs
  fragment: geometry-aa-last-pass.fs
  
output
  filter: nearest